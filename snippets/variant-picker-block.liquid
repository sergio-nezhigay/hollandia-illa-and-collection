{{ 'variant-picker-block.css' | asset_url | stylesheet_tag }}

{% assign color_option = blank %}
{% assign size_option = blank %}

{% for option in product.options_with_values %}
  {% assign option_name = option.name | downcase %}
  {% if option_name == 'color' or option_name == 'colour' or option_name == 'צבע' or option_name == 'גוון' %}
    {% assign color_option = option %}
  {% elsif option_name == 'size' or option_name == 'גודל' or option_name == 'מידה' %}
    {% assign size_option = option %}
  {% endif %}
{% endfor %}

<div class="variant-picker-block" {{ block.shopify_attributes }}>
  
  {% if color_option %}
    <div class="color-picker-section">
      <div class="color-header">
        <span class="color-label">{{ block.settings.color_label | default: 'גוון' }}:</span>
        <span class="color-value">{{ product.selected_or_first_available_variant.option1 | default: color_option.values.first }}</span>
      </div>
      
      <div class="color-swatches-container">
        <div class="color-swatches">
          {% for value in color_option.values %}
            {% assign variant_for_color = blank %}
            {% assign featured_media_id = blank %}
            {% for variant in product.variants %}
              {% if variant.option1 == value %}
                {% assign variant_for_color = variant %}
                {% if variant.featured_media %}
                  {% assign featured_media_id = variant.featured_media.id %}
                {% endif %}
                {% break %}
              {% endif %}
            {% endfor %}
            
            <button class="color-swatch {% if forloop.first %}active{% endif %}" 
                    data-color="{{ value }}" 
                    data-variant-id="{{ variant_for_color.id }}"
                    data-featured-media="{{ featured_media_id }}"
                    {% unless variant_for_color.available %}disabled{% endunless %}>
              <div class="color-circle" data-color="{{ value | downcase }}"></div>
            </button>
          {% endfor %}
        </div>
        
        <button class="color-options-btn">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path d="M3 8H13M8 3L13 8L8 13" stroke="#DD2D4A" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          <span>+ 100 נוספים, לצפייה פזיזה</span>
        </button>
      </div>
    </div>
  {% endif %}
  
  <div class="variant-controls-section">
    <div class="variant-controls-header">
      <span class="controls-label">{{ block.settings.size_label | default: 'בחר גודל מיטה' }}</span>
    </div>
    
    <div class="variant-controls">
      {% if size_option %}
        <div class="size-selector">
          <div class="custom-select">
            <div class="select-trigger">
              <span class="select-value">מידה {{ size_option.values.first }}</span>
              <svg class="select-arrow" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M4 6L8 10L12 6" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            <div class="select-dropdown">
              {% for value in size_option.values %}
                <div class="select-option {% if forloop.first %}selected{% endif %}" data-value="{{ value }}">
                  מידה {{ value }}
                </div>
              {% endfor %}
            </div>
          </div>
        </div>
      {% endif %}
      
      <div class="quantity-selector">
        <button class="quantity-btn quantity-plus" type="button">+</button>
        <input type="number" class="quantity-input" value="1" min="1" max="99">
        <button class="quantity-btn quantity-minus" type="button">−</button>
      </div>
    </div>
  </div>
  
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const variantPicker = document.querySelector('.variant-picker-block');
  if (!variantPicker) return;

  const colorSwatches = variantPicker.querySelectorAll('.color-swatch');
  const colorValue = variantPicker.querySelector('.color-value');
  const quantityInput = variantPicker.querySelector('.quantity-input');
  const quantityMinus = variantPicker.querySelector('.quantity-minus');
  const quantityPlus = variantPicker.querySelector('.quantity-plus');
  const sizeSelect = variantPicker.querySelector('.custom-select');
  const selectTrigger = variantPicker.querySelector('.select-trigger');
  const selectValue = variantPicker.querySelector('.select-value');
  const selectOptions = variantPicker.querySelectorAll('.select-option');

  let currentVariant = {{ product.selected_or_first_available_variant | json }};
  let selectedColor = '{{ product.selected_or_first_available_variant.option1 | default: color_option.values.first }}';
  let selectedSize = '{{ product.selected_or_first_available_variant.option2 | default: size_option.values.first }}';

  function initializeVariant() {
    if (currentVariant) {
      updatePricing();
    }
  }

  if (selectTrigger) {
    selectTrigger.addEventListener('click', function() {
      sizeSelect.classList.toggle('open');
    });
  }

  selectOptions.forEach(option => {
    option.addEventListener('click', function() {
      selectOptions.forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      
      selectValue.textContent = this.textContent;
      sizeSelect.classList.remove('open');
      
      selectedSize = this.dataset.value;
      updateVariantByOptions();
    });
  });

  document.addEventListener('click', function(e) {
    if (sizeSelect && !sizeSelect.contains(e.target)) {
      sizeSelect.classList.remove('open');
    }
  });

  colorSwatches.forEach(swatch => {
    swatch.addEventListener('click', function() {
      if (this.disabled) return;
      
      colorSwatches.forEach(s => s.classList.remove('active'));
      this.classList.add('active');
      
      selectedColor = this.dataset.color;
      if (colorValue) {
        colorValue.textContent = selectedColor;
      }
      
      const featuredMediaId = this.dataset.featuredMedia;
      if (featuredMediaId && window.updateGalleryByMediaId) {
        window.updateGalleryByMediaId(featuredMediaId);
      }
      
      updateVariantByOptions();
    });
  });

  quantityInput.addEventListener('change', function() {
    updatePricing();
  });

  quantityMinus.addEventListener('click', function() {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue > 1) {
      quantityInput.value = currentValue - 1;
      updatePricing();
    }
  });

  quantityPlus.addEventListener('click', function() {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue < 99) {
      quantityInput.value = currentValue + 1;
      updatePricing();
    }
  });

  function updateVariantByOptions() {
    const variant = findVariantByOptions(selectedColor, selectedSize);
    if (variant) {
      currentVariant = variant;
      updatePricing();
    }
  }

  function findVariantByOptions(color, size) {
    const variants = {{ product.variants | json }};
    for (let variant of variants) {
      const matchesColor = !color || variant.option1 === color;
      const matchesSize = !size || variant.option2 === size;
      if (matchesColor && matchesSize) {
        return variant;
      }
    }
    return variants[0];
  }

  function updatePricing() {
    if (!currentVariant) return;
    
    const quantity = parseInt(quantityInput.value) || 1;
    const price = currentVariant.price;
    const compareAtPrice = currentVariant.compare_at_price;
    
    const priceTable = document.querySelector('.price-table-block');
    if (priceTable) {
      updatePriceTable(price, compareAtPrice, quantity);
    }
  }

  function updatePriceTable(price, compareAtPrice, quantity) {
    const formatPrice = (priceInCents) => {
      const priceNum = Math.floor(priceInCents / 100) * quantity;
      if (priceNum >= 1000) {
        const thousands = Math.floor(priceNum / 1000);
        const remainder = String(priceNum % 1000).padStart(3, '0');
        return `₪${thousands},${remainder}`;
      }
      return `₪${priceNum}`;
    };

    const currentPriceElements = document.querySelectorAll('.price-column .current-price');
    const deliveryPrice = parseInt(document.querySelector('[data-delivery-price]')?.dataset.deliveryPrice) || 550;
    
    if (currentPriceElements[0]) {
      currentPriceElements[0].textContent = formatPrice(price);
    }
    
    if (currentPriceElements[2]) {
      const totalPrice = Math.floor(price / 100) * quantity + deliveryPrice;
      if (totalPrice >= 1000) {
        const thousands = Math.floor(totalPrice / 1000);
        const remainder = String(totalPrice % 1000).padStart(3, '0');
        currentPriceElements[2].textContent = `₪${thousands},${remainder}`;
      } else {
        currentPriceElements[2].textContent = `₪${totalPrice}`;
      }
    }
    
    const installmentText = document.querySelector('.discount-text-pdp');
    if (installmentText) {
      const totalPrice = Math.floor(price / 100) * quantity + deliveryPrice;
      const monthlyPayment = Math.ceil(totalPrice / 12);
      installmentText.textContent = `החל מ-${monthlyPayment} ₪ לחודש • 12 תשלומים`;
    }
  }

  initializeVariant();
});
</script>
<script>
function dispatchVariantChange(variant) {
  const event = new CustomEvent('variant:changed', {
    detail: { variant },
    bubbles: true
  });
  document.dispatchEvent(event);
}

function dispatchQuantityChange(quantity) {
  const event = new CustomEvent('quantity:changed', {
    detail: { quantity },
    bubbles: true
  });
  document.dispatchEvent(event);
}

function updateVariantByOptions() {
  const variant = findVariantByOptions(selectedColor, selectedSize);
  if (variant) {
    currentVariant = variant;
    updatePricing();
    dispatchVariantChange(variant);
  }
}


quantityInput.addEventListener('change', function() {
  updatePricing();
  dispatchQuantityChange(this.value);
});

quantityMinus.addEventListener('click', function() {
  const currentValue = parseInt(quantityInput.value);
  if (currentValue > 1) {
    quantityInput.value = currentValue - 1;
    updatePricing();
    dispatchQuantityChange(quantityInput.value);
  }
});

quantityPlus.addEventListener('click', function() {
  const currentValue = parseInt(quantityInput.value);
  if (currentValue < 99) {
    quantityInput.value = currentValue + 1;
    updatePricing();
    dispatchQuantityChange(quantityInput.value);
  }
});


setTimeout(function() {
  if (currentVariant) {
    dispatchVariantChange(currentVariant);
  }
  dispatchQuantityChange(quantityInput.value);
}, 100);
</script>